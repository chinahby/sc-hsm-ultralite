This document covers the theory and operation of
sc-hsm-ultralite-signer and its associated scripts.

The core executable, sc-hsm-ultralite-signer, takes a variable number
of paths as arguments.  For each specified file path it signs the file
if it is new or modified since the last time it was signed.  For each
specified directory path it scans through the directory and signs each
file which is new or modified.  For each signed file, a detached
PKCS#7 signature file is created with the following naming convention:
<filename>.p7s. Metadata about the signature is also appended to the
end of the PKCS#7 document.  The metadata includes the size of the
file at the time of signing (i.e. the hashed content length) and also
a binary blob of the hash state, before finalization, at the time of
signing.  This allows sc-hsm-ultralite-signer to quickly sign modified
files (particularly very large files) because it can continue hashing
where it left off i.e. only the new portion of the file.

The following convenience scripts are also included for Windows and Linux:
sc-hsm-ultralite-signer.cmd (Windows)
sc-hsm-ultralite-signer.sh  (Linux)

The logging of error/info messages generated by
sc-hsm-ultralite-signer was purposefully left very generic.  Info
level messages are simply printed to stdout and error level messages
are printed to stderr.  This allows implementation of logging in a
system-specific manner.  The sc-hsm-ultralite-signer.cmd (Windows) and
sc-hsm-ultralite-signer.sh (Linux) scripts are simple examples of how
to capture the log messages to file.  These scripts simply redirect
stdout and stderr to files.  (The scripts also implement a simple log
rotation when the log reaches a maximum size. Additionally, the Linux
log.sh script guards against simultaneous multiple access to the log
files with an flock.)  Another possible implementation, e.g. on a
Linux system, would be to redirect each line to the logger
command-line utility for capture in syslog.

The functionality of sc-hsm-ultralite-signer was also purposefully
left generic.  In a system which generates a large number of files the
performance of sc-hsm-ultralite-signer will degrade over time as the
number of entries in the specified folder(s) grows.  In other words,
it will spend most of its time scanning through folders with unchanged
files.  The smarter approach is to organize files into so-called
"month folders" where data are organized by date (e.g. files from
September 2013 go in a directory named "2013-09", files from October
2013 go in a directory named "2013-10", etc.).  The scripts
sc-hsm-ultralite-signer.cmd (Windows) and sc-hsm-ultralite-signer.sh
(Linux) restrict the scan path of sc-hsm-ultralite-signer to the
current month (and previous month in case the current day is the first
day of the month).  Furthermore, the scripts only search for files
from the current day and previous day. This prevents signing or
re-signing old data.
